diff --git a/src-orig/com/google/zxing/client/android/CaptureActivityHandler.java b/src/com/google/zxing/client/android/CaptureActivityHandler.java
index 9ec3ecf..3aa269f 100755
--- a/src-orig/com/google/zxing/client/android/CaptureActivityHandler.java
+++ b/src/com/google/zxing/client/android/CaptureActivityHandler.java
@@ -77,58 +77,61 @@ public final class CaptureActivityHandler extends Handler {
 
   @Override
   public void handleMessage(Message message) {
-    int switchValue = message.what;
-    if(switchValue == R.id.zxing_restart_preview) {
-        restartPreviewAndDecode();
-      } else if(switchValue == R.id.zxing_decode_succeeded) {
-        state = State.SUCCESS;
-        Bundle bundle = message.getData();
-        Bitmap barcode = null;
-        float scaleFactor = 1.0f;
-        if (bundle != null) {
-          byte[] compressedBitmap = bundle.getByteArray(DecodeThread.BARCODE_BITMAP);
-          if (compressedBitmap != null) {
-            barcode = BitmapFactory.decodeByteArray(compressedBitmap, 0, compressedBitmap.length, null);
-            // Mutable copy:
-            barcode = barcode.copy(Bitmap.Config.ARGB_8888, true);
-          }
-          scaleFactor = bundle.getFloat(DecodeThread.BARCODE_SCALED_FACTOR);          
-        }
-        activity.handleDecode((Result) message.obj, barcode, scaleFactor);
-      } else if(switchValue == R.id.zxing_decode_failed) {
-        // We're decoding as fast as possible, so when one decode fails, start another.
-        state = State.PREVIEW;
-        cameraManager.requestPreviewFrame(decodeThread.getHandler(), R.id.zxing_decode);
-      } else if(switchValue == R.id.zxing_return_scan_result) {
-        activity.setResult(Activity.RESULT_OK, (Intent) message.obj);
-        activity.finish();
-      } else if(switchValue == R.id.zxing_launch_product_query) {
-        String url = (String) message.obj;
-
-        Intent intent = new Intent(Intent.ACTION_VIEW);
-        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
-        intent.setData(Uri.parse(url));
-
-        ResolveInfo resolveInfo =
-            activity.getPackageManager().resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);
-        String browserPackageName = null;
-        if (resolveInfo != null && resolveInfo.activityInfo != null) {
-          browserPackageName = resolveInfo.activityInfo.packageName;
-          Log.d(TAG, "Using browser in package " + browserPackageName);
+    if (message.what == R.id.zxing_restart_preview) {
+      restartPreviewAndDecode();
+
+    } else if (message.what == R.id.zxing_decode_succeeded) {
+      state = State.SUCCESS;
+      Bundle bundle = message.getData();
+      Bitmap barcode = null;
+      float scaleFactor = 1.0f;
+      if (bundle != null) {
+        byte[] compressedBitmap = bundle.getByteArray(DecodeThread.BARCODE_BITMAP);
+        if (compressedBitmap != null) {
+          barcode = BitmapFactory.decodeByteArray(compressedBitmap, 0, compressedBitmap.length, null);
+          // Mutable copy:
+          barcode = barcode.copy(Bitmap.Config.ARGB_8888, true);
         }
+        scaleFactor = bundle.getFloat(DecodeThread.BARCODE_SCALED_FACTOR);
+      }
+      activity.handleDecode((Result) message.obj, barcode, scaleFactor);
 
-        // Needed for default Android browser / Chrome only apparently
-        if ("com.android.browser".equals(browserPackageName) || "com.android.chrome".equals(browserPackageName)) {
-          intent.setPackage(browserPackageName);
-          intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-          intent.putExtra(Browser.EXTRA_APPLICATION_ID, browserPackageName);
-        }
+    } else if (message.what == R.id.zxing_decode_failed) {// We're decoding as fast as possible, so when one decode fails, start another.
+      state = State.PREVIEW;
+      cameraManager.requestPreviewFrame(decodeThread.getHandler(), R.id.zxing_decode);
+
+    } else if (message.what == R.id.zxing_return_scan_result) {
+      activity.setResult(Activity.RESULT_OK, (Intent) message.obj);
+      activity.finish();
+
+    } else if (message.what == R.id.zxing_launch_product_query) {
+      String url = (String) message.obj;
+
+      Intent intent = new Intent(Intent.ACTION_VIEW);
+      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
+      intent.setData(Uri.parse(url));
+
+      ResolveInfo resolveInfo =
+              activity.getPackageManager().resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);
+      String browserPackageName = null;
+      if (resolveInfo != null && resolveInfo.activityInfo != null) {
+        browserPackageName = resolveInfo.activityInfo.packageName;
+        Log.d(TAG, "Using browser in package " + browserPackageName);
+      }
+
+      // Needed for default Android browser / Chrome only apparently
+      if ("com.android.browser".equals(browserPackageName) || "com.android.chrome".equals(browserPackageName)) {
+        intent.setPackage(browserPackageName);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        intent.putExtra(Browser.EXTRA_APPLICATION_ID, browserPackageName);
+      }
+
+      try {
+        activity.startActivity(intent);
+      } catch (ActivityNotFoundException ignored) {
+        Log.w(TAG, "Can't find anything to handle VIEW of URI " + url);
+      }
 
-        try {
-          activity.startActivity(intent);
-        } catch (ActivityNotFoundException ignored) {
-          Log.w(TAG, "Can't find anything to handle VIEW of URI " + url);
-        }
     }
   }
 
diff --git a/src-orig/com/google/zxing/client/android/HelpActivity.java b/src/com/google/zxing/client/android/HelpActivity.java
index f0ea672..e485fec 100644
--- a/src-orig/com/google/zxing/client/android/HelpActivity.java
+++ b/src/com/google/zxing/client/android/HelpActivity.java
@@ -29,7 +29,7 @@ import android.webkit.WebView;
 public final class HelpActivity extends Activity {
 
   private static final String BASE_URL =
-      "file:///android_asset/zxing/html-" + LocaleManager.getTranslatedAssetLanguage() + '/';
+      "file:///android_asset/zxing/html-en/";
 
   private WebView webView;
 
diff --git a/src-orig/com/google/zxing/client/android/PreferencesFragment.java b/src/com/google/zxing/client/android/PreferencesFragment.java
index b325064..2da24ac 100644
--- a/src-orig/com/google/zxing/client/android/PreferencesFragment.java
+++ b/src/com/google/zxing/client/android/PreferencesFragment.java
@@ -51,10 +51,6 @@ public final class PreferencesFragment
                                     PreferencesActivity.KEY_DECODE_AZTEC,
                                     PreferencesActivity.KEY_DECODE_PDF417);
     disableLastCheckedPref();
-
-    EditTextPreference customProductSearch = (EditTextPreference)
-        preferences.findPreference(PreferencesActivity.KEY_CUSTOM_PRODUCT_SEARCH);
-    customProductSearch.setOnPreferenceChangeListener(new CustomSearchURLValidator());
   }
 
   private static CheckBoxPreference[] findDecodePrefs(PreferenceScreen preferences, String... keys) {
@@ -83,44 +79,4 @@ public final class PreferencesFragment
     }
   }
 
-  private class CustomSearchURLValidator implements Preference.OnPreferenceChangeListener {
-    @Override
-    public boolean onPreferenceChange(Preference preference, Object newValue) {
-      if (!isValid(newValue)) {
-        AlertDialog.Builder builder =
-            new AlertDialog.Builder(PreferencesFragment.this.getActivity());
-        builder.setTitle(R.string.zxing_msg_error);
-        builder.setMessage(R.string.zxing_msg_invalid_value);
-        builder.setCancelable(true);
-        builder.show();
-        return false;
-      }
-      return true;
-    }
-
-    private boolean isValid(Object newValue) {
-      // Allow empty/null value
-      if (newValue == null) {
-        return true;
-      }
-      String valueString = newValue.toString();
-      if (valueString.isEmpty()) {
-        return true;
-      }
-      // Before validating, remove custom placeholders, which will not
-      // be considered valid parts of the URL in some locations:
-      // Blank %t and %s:
-      valueString = valueString.replaceAll("%[st]", "");
-      // Blank %f but not if followed by digit or a-f as it may be a hex sequence
-      valueString = valueString.replaceAll("%f(?![0-9a-f])", "");
-      // Require a scheme otherwise:
-      try {
-        URI uri = new URI(valueString);
-        return uri.getScheme() != null;
-      } catch (URISyntaxException use) {
-        return false;
-      }
-    }
-  }
-
 }
diff --git a/src-orig/com/google/zxing/client/android/CaptureActivity.java b/src/com/google/zxing/client/android/CaptureActivity.java
index 9eb04e2..77cecbe 100755
--- a/src-orig/com/google/zxing/client/android/CaptureActivity.java
+++ b/src/com/google/zxing/client/android/CaptureActivity.java
@@ -16,29 +16,12 @@
 
 package com.google.zxing.client.android;
 
-import com.google.zxing.BarcodeFormat;
-import com.google.zxing.DecodeHintType;
-import com.google.zxing.Result;
-import com.google.zxing.ResultMetadataType;
-import com.google.zxing.ResultPoint;
-import com.google.zxing.client.android.camera.CameraManager;
-import com.google.zxing.client.android.clipboard.ClipboardInterface;
-import com.google.zxing.client.android.history.HistoryActivity;
-import com.google.zxing.client.android.history.HistoryItem;
-import com.google.zxing.client.android.history.HistoryManager;
-import com.google.zxing.client.android.result.ResultButtonListener;
-import com.google.zxing.client.android.result.ResultHandler;
-import com.google.zxing.client.android.result.ResultHandlerFactory;
-import com.google.zxing.client.android.result.supplement.SupplementalInfoRetriever;
-import com.google.zxing.client.android.share.ShareActivity;
-
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.ActivityInfo;
 import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.net.Uri;
@@ -47,7 +30,6 @@ import android.os.Handler;
 import android.os.Message;
 import android.preference.PreferenceManager;
 import android.util.Log;
-import android.util.TypedValue;
 import android.view.KeyEvent;
 import android.view.Menu;
 import android.view.MenuInflater;
@@ -56,17 +38,20 @@ import android.view.Surface;
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;
 import android.view.View;
-import android.view.ViewGroup;
 import android.view.Window;
 import android.view.WindowManager;
-import android.widget.ImageView;
+import android.widget.Button;
 import android.widget.TextView;
-import android.widget.Toast;
+
+import com.google.zxing.BarcodeFormat;
+import com.google.zxing.DecodeHintType;
+import com.google.zxing.Result;
+import com.google.zxing.ResultMetadataType;
+import com.google.zxing.ResultPoint;
+import com.google.zxing.client.android.camera.CameraManager;
 
 import java.io.IOException;
-import java.text.DateFormat;
 import java.util.Collection;
-import java.util.Date;
 import java.util.EnumSet;
 import java.util.Map;
 
@@ -87,13 +72,12 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
 
   private static final String[] ZXING_URLS = { "http://zxing.appspot.com/scan", "zxing://scan/" };
 
-  public static final int HISTORY_REQUEST_CODE = 0x0000bacc;
-
   private static final Collection<ResultMetadataType> DISPLAYABLE_METADATA_TYPES =
       EnumSet.of(ResultMetadataType.ISSUE_NUMBER,
                  ResultMetadataType.SUGGESTED_PRICE,
                  ResultMetadataType.ERROR_CORRECTION_LEVEL,
                  ResultMetadataType.POSSIBLE_COUNTRY);
+  public static final java.lang.String ZXING_CAPTURE_LAYOUT_ID_KEY = "ZXING_CAPTURE_LAYOUT_ID_KEY";
 
   private CameraManager cameraManager;
   private CaptureActivityHandler handler;
@@ -103,18 +87,17 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
   private View resultView;
   private Result lastResult;
   private boolean hasSurface;
-  private boolean copyToClipboard;
   private IntentSource source;
   private String sourceUrl;
-  private ScanFromWebPageManager scanFromWebPageManager;
   private Collection<BarcodeFormat> decodeFormats;
   private Map<DecodeHintType,?> decodeHints;
   private String characterSet;
-  private HistoryManager historyManager;
   private InactivityTimer inactivityTimer;
   private BeepManager beepManager;
   private AmbientLightManager ambientLightManager;
 
+  private Button cancelButton;
+
   ViewfinderView getViewfinderView() {
     return viewfinderView;
   }
@@ -133,16 +116,36 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
 
     Window window = getWindow();
     window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
-    setContentView(R.layout.zxing_capture);
+
+    // If the resource id with a layout was provided, set up this leyout
+    Bundle extras = getIntent().getExtras();
+
+    int zxingCaptureLayoutResourceId = R.layout.zxing_capture;
+    if (extras != null) {
+        zxingCaptureLayoutResourceId = extras.getInt(ZXING_CAPTURE_LAYOUT_ID_KEY, R.layout.zxing_capture);
+    }
+    setContentView (zxingCaptureLayoutResourceId);
 
     hasSurface = false;
-    historyManager = new HistoryManager(this);
-    historyManager.trimHistory();
     inactivityTimer = new InactivityTimer(this);
     beepManager = new BeepManager(this);
     ambientLightManager = new AmbientLightManager(this);
 
     PreferenceManager.setDefaultValues(this, R.xml.zxing_preferences, false);
+
+    cancelButton = (Button) findViewById(R.id.zxing_back_button);
+
+    // Since the layout can be dynamically set by the Intent, cancelButton may not be present
+    if (cancelButton != null) {
+      cancelButton.setOnClickListener(new View.OnClickListener() {
+              @Override
+              public void onClick(View view) {
+                  setResult(RESULT_CANCELED);
+                  finish();
+              }
+          });
+    }
+
   }
 
   @Override
@@ -192,9 +195,6 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
 
     Intent intent = getIntent();
 
-    copyToClipboard = prefs.getBoolean(PreferencesActivity.KEY_COPY_TO_CLIPBOARD, true)
-        && (intent == null || intent.getBooleanExtra(Intents.Scan.SAVE_HISTORY, true));
-
     source = IntentSource.NONE;
     decodeFormats = null;
     characterSet = null;
@@ -218,14 +218,14 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
             cameraManager.setManualFramingRect(width, height);
           }
         }
-		
+
         if (intent.hasExtra(Intents.Scan.CAMERA_ID)) {
           int cameraId = intent.getIntExtra(Intents.Scan.CAMERA_ID, -1);
           if (cameraId >= 0) {
             cameraManager.setManualCameraId(cameraId);
           }
         }
-        
+
         String customPromptMessage = intent.getStringExtra(Intents.Scan.PROMPT_MESSAGE);
         if (customPromptMessage != null) {
           statusView.setText(customPromptMessage);
@@ -247,7 +247,6 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
         source = IntentSource.ZXING_LINK;
         sourceUrl = dataString;
         Uri inputUri = Uri.parse(dataString);
-        scanFromWebPageManager = new ScanFromWebPageManager(inputUri);
         decodeFormats = DecodeFormatManager.parseDecodeFormats(inputUri);
         // Allow a sub-set of the hints to be specified by the caller.
         decodeHints = DecodeHintManager.parseDecodeHints(inputUri);
@@ -269,7 +268,7 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
         return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
     }
   }
-  
+
   private static boolean isZXingURL(String dataString) {
     if (dataString == null) {
       return false;
@@ -346,38 +345,16 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
   public boolean onOptionsItemSelected(MenuItem item) {
     Intent intent = new Intent(Intent.ACTION_VIEW);
     intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
-    int switchValue = item.getItemId();
-    if(switchValue == R.id.zxing_menu_share) {
-        intent.setClassName(this, ShareActivity.class.getName());
-        startActivity(intent);
-      } else if(switchValue == R.id.zxing_menu_history) {
-        intent.setClassName(this, HistoryActivity.class.getName());
-        startActivityForResult(intent, HISTORY_REQUEST_CODE);
-      } else if(switchValue == R.id.zxing_menu_settings) {
-        intent.setClassName(this, PreferencesActivity.class.getName());
-        startActivity(intent);
-      } else if(switchValue == R.id.zxing_menu_help) {
-        intent.setClassName(this, HelpActivity.class.getName());
-        startActivity(intent);
-      } else {
-        return super.onOptionsItemSelected(item);
+    int itemId = item.getItemId();
+    if(itemId == R.id.zxing_menu_help) {
+      intent.setClassName(this, HelpActivity.class.getName());
+      startActivity(intent);
+    } else {
+      return super.onOptionsItemSelected(item);
     }
     return true;
   }
 
-  @Override
-  public void onActivityResult(int requestCode, int resultCode, Intent intent) {
-    if (resultCode == RESULT_OK) {
-      if (requestCode == HISTORY_REQUEST_CODE) {
-        int itemNumber = intent.getIntExtra(Intents.History.ITEM_NUMBER, -1);
-        if (itemNumber >= 0) {
-          HistoryItem historyItem = historyManager.buildHistoryItem(itemNumber);
-          decodeOrStoreSavedBitmap(null, historyItem.getResult());
-        }
-      }
-    }
-  }
-
   private void decodeOrStoreSavedBitmap(Bitmap bitmap, Result result) {
     // Bitmap isn't used yet -- will be used soon
     if (handler == null) {
@@ -419,47 +396,20 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
    * A valid barcode has been found, so give an indication of success and show the results.
    *
    * @param rawResult The contents of the barcode.
-   * @param scaleFactor amount by which thumbnail was scaled
    * @param barcode   A greyscale bitmap of the camera data which was decoded.
    */
   public void handleDecode(Result rawResult, Bitmap barcode, float scaleFactor) {
     inactivityTimer.onActivity();
     lastResult = rawResult;
-    ResultHandler resultHandler = ResultHandlerFactory.makeResultHandler(this, rawResult);
 
     boolean fromLiveScan = barcode != null;
     if (fromLiveScan) {
-      historyManager.addHistoryItem(rawResult, resultHandler);
       // Then not from history, so beep/vibrate and we have an image to draw on
       beepManager.playBeepSoundAndVibrate();
       drawResultPoints(barcode, scaleFactor, rawResult);
     }
 
-    switch (source) {
-      case NATIVE_APP_INTENT:
-      case PRODUCT_SEARCH_LINK:
-        handleDecodeExternally(rawResult, resultHandler, barcode);
-        break;
-      case ZXING_LINK:
-        if (scanFromWebPageManager == null || !scanFromWebPageManager.isScanFromWebPage()) {
-          handleDecodeInternally(rawResult, resultHandler, barcode);
-        } else {
-          handleDecodeExternally(rawResult, resultHandler, barcode);
-        }
-        break;
-      case NONE:
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
-        if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE, false)) {
-          Toast.makeText(getApplicationContext(),
-                         getResources().getString(R.string.zxing_msg_bulk_mode_scanned) + " (" + rawResult.getText() + ')',
-                         Toast.LENGTH_SHORT).show();
-          // Wait a moment or else it will scan the same barcode continuously about 3 times
-          restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);
-        } else {
-          handleDecodeInternally(rawResult, resultHandler, barcode);
-        }
-        break;
-    }
+    handleDecodeExternally(rawResult, barcode);
   }
 
   /**
@@ -505,99 +455,8 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
     }
   }
 
-  // Put up our own UI for how to handle the decoded contents.
-  private void handleDecodeInternally(Result rawResult, ResultHandler resultHandler, Bitmap barcode) {
-
-    CharSequence displayContents = resultHandler.getDisplayContents();
-
-    if (copyToClipboard && !resultHandler.areContentsSecure()) {
-      ClipboardInterface.setText(displayContents, this);
-    }
-
-    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
-
-    if (resultHandler.getDefaultButtonID() != null && prefs.getBoolean(PreferencesActivity.KEY_AUTO_OPEN_WEB, false)) {
-      resultHandler.handleButtonPress(resultHandler.getDefaultButtonID());
-      return;
-    }
-
-    statusView.setVisibility(View.GONE);
-    viewfinderView.setVisibility(View.GONE);
-    resultView.setVisibility(View.VISIBLE);
-
-    ImageView barcodeImageView = (ImageView) findViewById(R.id.zxing_barcode_image_view);
-    if (barcode == null) {
-      barcodeImageView.setImageBitmap(BitmapFactory.decodeResource(getResources(),
-          R.drawable.zxing_launcher_icon));
-    } else {
-      barcodeImageView.setImageBitmap(barcode);
-    }
-
-    TextView formatTextView = (TextView) findViewById(R.id.zxing_format_text_view);
-    formatTextView.setText(rawResult.getBarcodeFormat().toString());
-
-    TextView typeTextView = (TextView) findViewById(R.id.zxing_type_text_view);
-    typeTextView.setText(resultHandler.getType().toString());
-
-    DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);
-    TextView timeTextView = (TextView) findViewById(R.id.zxing_time_text_view);
-    timeTextView.setText(formatter.format(new Date(rawResult.getTimestamp())));
-
-
-    TextView metaTextView = (TextView) findViewById(R.id.zxing_meta_text_view);
-    View metaTextViewLabel = findViewById(R.id.zxing_meta_text_view_label);
-    metaTextView.setVisibility(View.GONE);
-    metaTextViewLabel.setVisibility(View.GONE);
-    Map<ResultMetadataType,Object> metadata = rawResult.getResultMetadata();
-    if (metadata != null) {
-      StringBuilder metadataText = new StringBuilder(20);
-      for (Map.Entry<ResultMetadataType,Object> entry : metadata.entrySet()) {
-        if (DISPLAYABLE_METADATA_TYPES.contains(entry.getKey())) {
-          metadataText.append(entry.getValue()).append('\n');
-        }
-      }
-      if (metadataText.length() > 0) {
-        metadataText.setLength(metadataText.length() - 1);
-        metaTextView.setText(metadataText);
-        metaTextView.setVisibility(View.VISIBLE);
-        metaTextViewLabel.setVisibility(View.VISIBLE);
-      }
-    }
-
-    TextView contentsTextView = (TextView) findViewById(R.id.zxing_contents_text_view);
-    contentsTextView.setText(displayContents);
-    int scaledSize = Math.max(22, 32 - displayContents.length() / 4);
-    contentsTextView.setTextSize(TypedValue.COMPLEX_UNIT_SP, scaledSize);
-
-    TextView supplementTextView = (TextView) findViewById(R.id.zxing_contents_supplement_text_view);
-    supplementTextView.setText("");
-    supplementTextView.setOnClickListener(null);
-    if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(
-        PreferencesActivity.KEY_SUPPLEMENTAL, true)) {
-      SupplementalInfoRetriever.maybeInvokeRetrieval(supplementTextView,
-                                                     resultHandler.getResult(),
-                                                     historyManager,
-                                                     this);
-    }
-
-    int buttonCount = resultHandler.getButtonCount();
-    ViewGroup buttonView = (ViewGroup) findViewById(R.id.zxing_result_button_view);
-    buttonView.requestFocus();
-    for (int x = 0; x < ResultHandler.MAX_BUTTON_COUNT; x++) {
-      TextView button = (TextView) buttonView.getChildAt(x);
-      if (x < buttonCount) {
-        button.setVisibility(View.VISIBLE);
-        button.setText(resultHandler.getButtonText(x));
-        button.setOnClickListener(new ResultButtonListener(resultHandler, x));
-      } else {
-        button.setVisibility(View.GONE);
-      }
-    }
-
-  }
-
   // Briefly show the contents of the barcode, then handle the result outside Barcode Scanner.
-  private void handleDecodeExternally(Result rawResult, ResultHandler resultHandler, Bitmap barcode) {
+  private void handleDecodeExternally(Result rawResult, Bitmap barcode) {
 
     if (barcode != null) {
       viewfinderView.drawResultBitmap(barcode);
@@ -611,19 +470,6 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
                                                   DEFAULT_INTENT_RESULT_DURATION_MS);
     }
 
-    if (resultDurationMS > 0) {
-      String rawResultString = String.valueOf(rawResult);
-      if (rawResultString.length() > 32) {
-        rawResultString = rawResultString.substring(0, 32) + " ...";
-      }
-      statusView.setText(getString(resultHandler.getDisplayTitle()) + " : " + rawResultString);
-    }
-
-    if (copyToClipboard && !resultHandler.areContentsSecure()) {
-      CharSequence text = resultHandler.getDisplayContents();
-      ClipboardInterface.setText(text, this);
-    }
-
     if (source == IntentSource.NATIVE_APP_INTENT) {
       
       // Hand back whatever action they requested - this can be changed to Intents.Scan.ACTION when
@@ -662,21 +508,6 @@ public final class CaptureActivity extends Activity implements SurfaceHolder.Cal
       }
       sendReplyMessage(R.id.zxing_return_scan_result, intent, resultDurationMS);
       
-    } else if (source == IntentSource.PRODUCT_SEARCH_LINK) {
-      
-      // Reformulate the URL which triggered us into a query, so that the request goes to the same
-      // TLD as the scan URL.
-      int end = sourceUrl.lastIndexOf("/scan");
-      String replyURL = sourceUrl.substring(0, end) + "?q=" + resultHandler.getDisplayContents() + "&source=zxing";      
-      sendReplyMessage(R.id.zxing_launch_product_query, replyURL, resultDurationMS);
-      
-    } else if (source == IntentSource.ZXING_LINK) {
-
-      if (scanFromWebPageManager != null && scanFromWebPageManager.isScanFromWebPage()) {
-        String replyURL = scanFromWebPageManager.buildReplyURL(rawResult, resultHandler);
-        sendReplyMessage(R.id.zxing_launch_product_query, replyURL, resultDurationMS);
-      }
-      
     }
   }
   
diff --git a/src-orig/com/google/zxing/client/android/DecodeHandler.java b/src/com/google/zxing/client/android/DecodeHandler.java
index b6a5561..eb8c0ca 100644
--- a/src-orig/com/google/zxing/client/android/DecodeHandler.java
+++ b/src/com/google/zxing/client/android/DecodeHandler.java
@@ -21,7 +21,6 @@ import com.google.zxing.BinaryBitmap;
 import com.google.zxing.DecodeHintType;
 import com.google.zxing.MultiFormatReader;
 import com.google.zxing.PlanarYUVLuminanceSource;
-import com.google.zxing.ReaderException;
 import com.google.zxing.Result;
 import com.google.zxing.common.HybridBinarizer;
 
@@ -53,12 +52,13 @@ final class DecodeHandler extends Handler {
     if (!running) {
       return;
     }
-    int switchValue = message.what;
-    if(switchValue == R.id.zxing_decode) {
-        decode((byte[]) message.obj, message.arg1, message.arg2);
-      } else if(switchValue == R.id.zxing_quit) {
-        running = false;
-        Looper.myLooper().quit();
+    if (message.what == R.id.zxing_decode) {
+      decode((byte[]) message.obj, message.arg1, message.arg2);
+
+    } else if (message.what == R.id.zxing_quit) {
+      running = false;
+      Looper.myLooper().quit();
+
     }
   }
 
@@ -78,7 +78,7 @@ final class DecodeHandler extends Handler {
       BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
       try {
         rawResult = multiFormatReader.decodeWithState(bitmap);
-      } catch (ReaderException re) {
+      } catch (Exception e) {
         // continue
       } finally {
         multiFormatReader.reset();
